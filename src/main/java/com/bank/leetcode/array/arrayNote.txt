
 int [] price
 min = 0
 max = price[i]
 for(int i= 1; i < price.lenght; i)
  if( 'max[i]' >  min)

else{ max = min}  'as' 'not' 'needs to be' 'larger' 'than'

Return ----> 'find' 'maximumProfit'


// 'max'. 'difference' = 6'-'1 = 5 ('not' 7-1 = 6, 'as' selling price 'needs to be' 'larger' 'than' buying price)
 condition 'max' 'difference' -  min

// In this case, no transaction is done, i.e. max profit = 0.


# as selling price needs to be
*** else {min = prices[i];} ***



  I.
// Say you have an array for which the ith element
// is the price of a given stock on day i.

// If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock),
// design an algorithm to find the maximum profit.

// Example 1:
// Input: [7, 1, 5, 3, 6, 4]
// Output: 5
// max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)

// Example 2:
// Input: [7, 6, 4, 3, 1]
// Output: 0
// In this case, no transaction is done, i.e. max profit = 0.

 II. //Given an 'array' of 'integers' and an 'integer k',
'find' out whether there are two distinct indices i and
   //j in the array 'such that' nums[i] = nums[j]
   and the absolute difference between i and j is at most k.

III. // Suppose you are at a party with n people (labeled 'from' 0 to n - 1) and among them, there may exist one celebrity.
# 'from'
The definition of a celebrity is that 'all' the other n - 1 people know him/her but he/she does not know 'any' of them.
     # 'all'
     // Now you want to 'find' out who the celebrity is or verify that there is 'not' one.
    # 'find' if() else ('not')
     The only thing you are 'allowed' to do is to 'ask' questions like: "Hi, A. Do you know B?" to 'get' information of whether A knows B.
     # 'allowed' 'ask' if( condition A 'get')
     You need to 'find' out the celebrity (or verify there is 'not' one) by asking 'as' few questions 'as' possible (in the asymptotic sense).
     # 'find' 'not' for()
     // You are given a helper function 'bool' knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n), your function 'should' minimize the number of calls to knows.

     // Note: There will be exactly one celebrity 'if' he/she is in the party. 'Return' the celebrity's label 'if' there is a celebrity in the party. 'If' there is 'no celebrity', 'return -1'.

     /* The knows API is defined in the parent class Relation.
           boolean knows(int a, int b); */
