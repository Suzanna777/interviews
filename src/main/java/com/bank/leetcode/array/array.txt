// Say you have an array for which the ith element
int[] {1,3,2,5}
price[i]
// is the price of a given stock on day i.

// If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock),
// design an algorithm to find the maximum profit.

// Example 1:

// Input: [7, 1, 5, 3, 6, 4] mx = p - mi = 4; 6 - 3 = 3; 2
// Output: 5
// max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)

// Example 2:
// Input: [7, 6, 4, 3, 1]
// Output: 0
// In this case, no transaction is done, i.e. max profit = 0.



  public int maxProfit(int[] prices) {
        1. max profit of arr[] of prices
        2. if price lenghth is ==0 return 0
        3. min start from index [0] of prices arr
        4. max price = we do not know then is = 0 for now

        5. iterate the arr of the prices starting from index i [1]
          5a. if the price in index [i] 1 is more > than min index[0]
          5b. then max price would be = price[i] - min
          5c. else min[] would be = price[i]

        if(prices.length == 0) {
            return 0;
        }

        int min = prices[0];
        int max = 0;

        for(int i = 1; i < prices.length; i++) {
            if(prices[i] > min) {
                max = Math.max(max, prices[i] - min);
            } else {
                min = prices[i];
            }
        }

        return max;
    }